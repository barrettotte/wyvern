# Testing interpreter

# general
λf.λx.x      # test 1
λf.(λx.x)    # test 2
λfx.x        # test 3

# Church Booleans
true := λx.λy.x
false := λx.λy.y
and := λx.λy.((x y) false)
or := λx.λy.((x true) y)
not := λx.((x false) true)
if := λc.λt.λe.((c t) e)

# Church numerals
0 := λs.λz.z
1 := λs.λz.(s z)
2 := λs.λz.(s (s z))
3 := λs.λz.(s (s (s z)))
inc := λn.λs.λz.(s ((n s) z))
plus := λm.λn.λs.λz.((m s) ((n s) z))
mul := λm.λn.((m (plus n)) 0)
is_zero := λm.((m (λx.false)) true)

# Simple data structures
pair := λf.λs.λc.((c f) s)
1st  := λp.(p true)
2nd  := λp.(p false)

# Recursive functions
F    := λn.(if (0? n) 1 (times n (f (dec n))))
Y    := λf.(λx.f (x x))(λx.f (x x))
fact := Y F
