(* untyped lambda calculus grammar *)

program             = { statement }
                    ;

statement           = (comment | definition | expression), "\n"
                    ;

comment             = "#", { character }
                    ;

definition          = identifier, ":=", expression
                    ;

expression          = ["("], (identifier | application | abstraction), [")"]
                    ;

application         = expression, expression
                    ;

abstraction         = "Î»", identifier, ".", expression
                    ;

identifier          = { character }
                    ;

character           = letter | digit | "_"
                    ;

letter              = uppercase | lowercase 
                    ;

uppercase           = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J"
                    | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T"
                    | "U" | "V" | "W" | "X" | "Y" | "Z" 
                    ;

lowercase           = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" 
                    | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" 
                    | "u" | "v" | "w" | "x" | "y" | "z" 
                    ;

digit               = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
                    ;
