(* untyped lambda calculus grammar *)

expression          = identifier | function | application
                    ;

abstraction         = lambda, identifier, dot, expression
                    ;

application         = expression, expression
                    ;

identifier          = { character - (lambda | dot) }
                    ;

lambda              = "Λ" | "λ"
                    ;

dot                 = "."
                    ;

character           = letter | greek_letter | digit | symbol
                    ;

letter              = uppercase | lowercase 
                    ;

greek_letter        = greek_upper | greek_lower
                    ;

symbol              = "!" | "@" | "#" | "$" | "%" | "^" | "&" | "*" | "_" | "-"
                    | "+" | "=" | ";" | ":" | "." | "," | "<" | ">" | "/" | "?" 
                    | "|" | "~" | "`"
                    ;

uppercase           = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J"
                    | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T"
                    | "U" | "V" | "W" | "X" | "Y" | "Z" 
                    ;

lowercase           = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" 
                    | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" 
                    | "u" | "v" | "w" | "x" | "y" | "z" 
                    ;

greek_upper         = "Α" | "Β" | "Γ" | "Δ" | "Ε" | "Ζ" | "Η" | "Θ" | "Ι" | "Κ"
                    | "Λ" | "Μ" | "Ν" | "Ξ" | "Ο" | "Π" | "Ρ" | "Σ" | "Τ" | "Υ"
                    | "Φ" | "Χ" | "Ψ" | "Ω"
                    ;

greek_lower         = "α" | "β" | "γ" | "δ" | "ε" | "ζ" | "η" | "θ" | "ι" | "κ"
                    | "λ" | "μ" | "ν" | "ξ" | "ο" | "π" | "ρ" | "σ" | "τ" | "υ"
                    | "φ" | "χ" | "ψ" | "ω"
                    ;
